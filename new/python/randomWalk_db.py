import db

from db import *
from models import *

from sqlalchemy import exists
import socket

class RandomWalkDB(object):

    def __init__(self):

        self.dbName = 'RandomWalk'

        # setup database
        self.session = setup(url='mysql+mysqldb://adrs0061:it4fOmen@localhost',
            databaseName=self.dbName)

    def getSession(self): return self.session 

    def commit(self):
        self.session.commit()

    def add_and_commit(self, obj):
        try:
            self.session.add(obj)
        except:
            self.session.rollback()
            raise
        else:
            self.commit()

    # TODO reimplement me better!!!
    def ParametersToDict(self, p):
        pass

    """ create new Parameter from dictionary """
    def createNewParameters(self, p):
        ret = Parameters(**p)
        assert ret.is_valid(), 'created Parameters is not valid!'
        return ret

    """ check that a model is valid """
    def is_valid(self, obj):
        # TODO maybe do a very general implementation here ? instead of in 
        # each of the model defns?
        return obj.is_valid()

    """ Query for parameters with filters based on dictionary """
    def queryExistsParam(self, P):
        assert isinstance(P, dict), 'Argument P has to be a dictionary'

        print 'P=', P

        q = self.session.query(Parameters)
        q = q.filter(exists())
        q = self.queryParamBuilder(q, **P)

        return q

    """ check if a record exists for data passed as a dictionary """
    def isParameter(self, P):
        return self.queryParam(P).scalar()

    """ Create Parameter entry in DB if it doesn't exist 
        param is a dictionary containing some or all values
        of the Parameter object """
    def param_create_if_not_exist(self, param):
        q = self.queryExistsParam(param)

        if not q.scalar():
            parameters = self.createNewParameters(param)
            self.add_and_commit(parameters)
        else:
            print('Parameters already exists in the database')
            # TODO check that this works
            parameters = q.all()[0]

        return parameters

    def queryParam(self, **kwargs):
        q = self.session.query(Parameters)
        return self.queryParamBuilder(q, **kwargs)

    def queryParamBuilder(self, query, **kwargs):

        for attr, value in kwargs.iteritems():
            query = query.filter(getattr(Parameters, attr).__eq__(value))

        return query

    """ Method to store a path generated by simulator in the database """
    def storePath(self, StateVector, time, rw_id, stochastic=True):

        rw = self.session.query(RandomWalk).get(rw_id)
        assert rw, "RandomWalk should have been set previously!!"

        metadata = PathMetaData(stochastic=stochastic, time=time)

        # TODO we would probably survive without storing all the
        # coordinates for all the points!! very expensive
        try:
            xi=0
            for state in StateVector:
                path = PathData(coord_x = xi,
                                coord_y = 0,
                                coord_z = 0,
                                population = state,
                                pathMetaData = metadata)
                
                rw.path.append(path)
                xi+=1
        except:
            self.session.rollback()
            raise
        else:
            self.commit()

    """ Create new Run Record in the DataBase 
        parameters is the wrapped C++ Parameters class """
    def createRandomWalk(self, version, parameters, finaltime):
        # TODO come up with a better way to deal with the description

        hostname = socket.gethostname()
        machine_id = self.queryMachineRecord(hostname)

        rw = RandomWalk('Space-jump simulation', version,
                finaltime)

        #p = self.queryParam(**self.ParametersToDict(parameters)).all()
        # parameters should just be an id now!!
        p = self.session.query(Parameters).get(parameters)
        m = self.session.query(MachineInfo).get(machine_id)
        # TODO solve this more elegantly
        #assert len(p)<2, "Error"

        #if not(p):
        #    p = self.createNewParameters(parameters)
        #    p.random_walk = [rw]
        #    self.session.add(p)
        #else:
        #    p=p[0]

        m.random_walk.append(rw)
        p.random_walk.append(rw)
        self.commit()

        # return the randomWalk id back to the main program
        return rw.id

    """ Create new machine info record """
    def createMachineRecord(self):
        machine = MachineInfo(socket.gethostname())        
        self.session.add(machine)
        self.commit()

    """ Query machine info record """
    def queryMachineRecord(self, hostname):
        stmt = exists().where(MachineInfo.name == hostname)
        q = self.session.query(MachineInfo.name).filter(stmt)

        # if it doesn't exist, create a new record
        if not q.scalar():
            self.createMachineRecord()
            
        # Now that the machine record exists, return its id
        return  self.session.query(MachineInfo.id).filter(MachineInfo.name ==
                hostname).first()
